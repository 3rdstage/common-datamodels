@startuml

' Useful references
/'
https://plantuml.com/class-diagram
https://plantuml.com/sequence-diagram
https://plantuml.com/creole
https://plantuml-documentation.readthedocs.io/en/latest/formatting/all-skin-params.html
https://plantuml-documentation.readthedocs.io/en/latest/formatting/all-skin-params.html#class
https://plantuml-documentation.readthedocs.io/en/latest/formatting/color-names.html
https://www.w3schools.com/colors/colors_names.asp
https://plantuml.com/color
'/


hide circle
show empty fields
show empty methods
' hide stereotypes


interface IERC165 {
  + supportsInterface(interfaceId : bytes4) : bool
  
}

abstract class ERC165 implements IERC165 {
  + **supportsInterface**(interfaceId : bytes4) : bool
}

abstract class Context {
  # _msgSender() : address
  # _msgData() : bytes
}


interface IERC1155 extends IERC165 {
  .. events ..
  TransferSingle(operator : address, from : address, to : address, id : uint25, value : uint256)
  TransferBatch(operator : address, from : address, to : address, ids : uint256[], values : uint256[])
  ApprovalForAll(account : address, operator : address, approved : bool)
  URI(value : string, id : uint256)
  .. functions ..
  + balanceOf(account : address, id : uint256) : uint256
  + balanceOfBatch(accounts : address[], ids : uint256[]) : uint256[]
  + setApprovalForAll(operator : address, approved : bool)
  + isApprovedForAll(account : address, operator : address) : bool
  + safeTransferFrom(from : address, to : address, id : uint256, amount : uint256, data : bytes)
  + safeBatchTransferFrom(from : address, to : address, ids : uint256[], amounts : uint256[], data : byte)

}

interface IERC1155MetadataURI extends IERC1155 {
  + uri(uint256 id) : string
}


class ERC1155 extends Context, ERC165 implements IERC1155, IERC1155MetadataURI {
  .. states ..
  - _balances : mapping(uint256 => mapping(address => uint256))
  - _operatorApprovals : mapping(address => mapping(address => bool))
  - _uri : string
  .. function ..
  + constructor(uri_ : string)
  + **uri**(uint256 id) : string
  + **balanceOf**(account : address, id : uint256) : uint256
  + **balanceOfBatch**(accounts : address[], ids : uint256[]) : uint256[]
  + **setApprovalForAll**(operator : address, approved : bool)
  + **isApprovedForAll**(account : address, operator : address) : bool
  + **safeTransferFrom**(from : address, to : address, id : uint256, amount : uint256, data : bytes)
  + **safeBatchTransferFrom**(from : address, to : address, ids : uint256[], amounts : uint256[], data : byte)
  # _safeTransferFrom(from : address, to : address, id : uint256, amount : uint256, data : bytes)
  # _safeBatchTransferFrom(from : address, to : address, ids : uint256[], amounts : uint256[], data : byte)
  # _setURI(newuri : string)
  # _mint(to : address, id : uint256, amount : uint256, data : bytes)
  # _mintBatch(to : address, ids : uint256[], amounts : uint256[], data : bytes)
  # _burn(from : address, id : uint256, amount : uint256)
  # _burnBatch(from : address, ids : uint256[], amounts : uint256[])
  # _setApprovalForAll(owner : address, operator : address, approved : bool)
  # _beforeTokenTransfer(operator : address, from : address, to : address, ids : uint256[],  uint256[] amounts, data : bytes)
  # _afterTokenTransfer(operator : address, from : address, to : address, ids : uint256[],  uint256[] amounts, data : bytes)
  - _doSafeTransferAcceptanceCheck((operator : address, from : address, to : address, id : uint256, amount : uint256, data : bytes)
  - _doSafeBatchTransferAcceptanceCheck(operator : address, from : address, to : address, ids : uint256[],  uint256[] amounts, data : bytes)
}

abstract class ERC1155Burnable extends ERC1155 {

}

abstract class Pausable extends Context{

}

abstract class ERC1155Pausable extends ERC1155, Pausable {

}

abstract class ERC1155Supply extends ERC1155 {

}

class ERC1155PresetMinterPauser extends Context, AccessControlEnumerable, ERC1155Burnable, ERC1155Pausable {


}


@enduml