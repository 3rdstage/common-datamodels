@startuml

' Useful references
/'
https://plantuml.com/class-diagram
https://plantuml.com/sequence-diagram
https://plantuml.com/creole
https://plantuml-documentation.readthedocs.io/en/latest/formatting/all-skin-params.html
https://plantuml-documentation.readthedocs.io/en/latest/formatting/all-skin-params.html#class
https://plantuml-documentation.readthedocs.io/en/latest/formatting/color-names.html
https://www.w3schools.com/colors/colors_names.asp
https://plantuml.com/color
'/


!include oz-v4-common-contracts.plantuml

hide circle
show empty fields
show empty methods
' hide stereotypes
hide IAccessControl members



interface "[[$baseUrl/token/ERC1155/IERC1155.sol IERC1155]]" as IERC1155 extends IERC165 {
  .. events ..
  TransferSingle(operator : address, from : address, to : address, id : uint25, value : uint256)
  TransferBatch(operator : address, from : address, to : address, ids : uint256[], values : uint256[])
  ApprovalForAll(account : address, operator : address, approved : bool)
  URI(value : string, id : uint256)
  .. functions ..
  + balanceOf(account : address, id : uint256) : uint256
  + balanceOfBatch(accounts : address[], ids : uint256[]) : uint256[]
  + setApprovalForAll(operator : address, approved : bool)
  + isApprovedForAll(account : address, operator : address) : bool
  + safeTransferFrom(from : address, to : address, id : uint256, amount : uint256, data : bytes)
  + safeBatchTransferFrom(from : address, to : address, ids : uint256[], amounts : uint256[], data : byte)

}

interface IERC1155MetadataURI extends IERC1155 {
  + uri(uint256 id) : string
}


class "[[$baseUrl/token/ERC1155/ERC1155.sol ERC1155]]" as ERC1155 extends Context, ERC165 implements IERC1155, IERC1155MetadataURI {
  .. states ..
  - _balances : mapping(uint256 => mapping(address => uint256))
  - _operatorApprovals : mapping(address => mapping(address => bool))
  - _uri : string
  .. function ..
  + constructor(uri_ : string)
  + **supportsInterface**(interfaceId : bytes4) : bool
  + **uri**(uint256 id) : string
  + **balanceOf**(account : address, id : uint256) : uint256
  + **balanceOfBatch**(accounts : address[], ids : uint256[]) : uint256[]
  + **setApprovalForAll**(operator : address, approved : bool)
  + **isApprovedForAll**(account : address, operator : address) : bool
  + **safeTransferFrom**(from : address, to : address, id : uint256, amount : uint256, data : bytes)
  + **safeBatchTransferFrom**(from : address, to : address, ids : uint256[], amounts : uint256[], data : byte)
  # _safeTransferFrom(from : address, to : address, id : uint256, amount : uint256, data : bytes)
  # _safeBatchTransferFrom(from : address, to : address, ids : uint256[], amounts : uint256[], data : byte)
  # _setURI(newuri : string)
  # _mint(to : address, id : uint256, amount : uint256, data : bytes)
  # _mintBatch(to : address, ids : uint256[], amounts : uint256[], data : bytes)
  # _burn(from : address, id : uint256, amount : uint256)
  # _burnBatch(from : address, ids : uint256[], amounts : uint256[])
  # _setApprovalForAll(owner : address, operator : address, approved : bool)
  # _beforeTokenTransfer(operator : address, from : address, to : address, ids : uint256[],  uint256[] amounts, data : bytes)
  # _afterTokenTransfer(operator : address, from : address, to : address, ids : uint256[],  uint256[] amounts, data : bytes)
  - _doSafeTransferAcceptanceCheck((operator : address, from : address, to : address, id : uint256, amount : uint256, data : bytes)
  - _doSafeBatchTransferAcceptanceCheck(operator : address, from : address, to : address, ids : uint256[],  uint256[] amounts, data : bytes)
}

abstract class ERC1155Burnable extends ERC1155 {
  + burn(account : address, id : uint256, value : uint256)
  + burnBatch(account : address, ids : uint256[], values : uint256[])
}

abstract class ERC1155Pausable extends ERC1155, Pausable {
  # **_beforeTokenTransfer**(operator : address, from : address, to : address, ids : uint256[],  uint256[] amounts, data : bytes)
}

abstract class ERC1155Supply extends ERC1155 {
  .. states ..
  - _totalSupply : mapping(uint256 => uint256)
  .. functions ..
  + totalSupply(id : uint256) : uint256
  + exists(id : uint256) : bool
  # **_beforeTokenTransfer**(operator : address, from : address, to : address, ids : uint256[],  uint256[] amounts, data : bytes)

}

abstract class ERC1155URIStorage extends ERC1155 {
  .. states ..
  - _baseURI : string
  - _tokenURIs : mapping(uint256 => string)
  .. functions ..
  + **uri**(tokenId : uint256) : string
  # _setURI(tokenId : uint256, tokenURI : string)
  # _setBaseURI(baseURI : string)
}


class "ERC1155PresetMinterPauser" as ERC1155PresetMinterPauser extends Context, AccessControlEnumerable, ERC1155Burnable, ERC1155Pausable {
  .. states ..
  + MINTER_ROLE : bytes32
  + PAUSER_ROLE : bytes32
  .. functions ..
  + mint(to : address, id : uint256, amount : uint256, data : bytes)
  + mintBatch(to : address, ids : uint256[], amounts : uint256[], data : bytes)
  + pause()
  + unpause()
  + **supportsInterface**(interfaceId : bytes4) : bool
  # **_beforeTokenTransfer**(operator : address, from : address, to : address, ids : uint256[],  uint256[] amounts, data : bytes)
}


@enduml